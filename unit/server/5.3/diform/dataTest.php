<?php

namespace diform;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-06-20 at 09:06:27.
 */
class dataTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var data
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new data;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers diform\data::extend
     * @todo   Implement testExtend().
     */
    public function testExtend() {
        // Remove the following lines when you implement this test.
        $this->object->extend(array('a' => 'b', 'c' => array('d' => 'e')));
        $this->assertObjectHasAttribute('a', $this->object);
        $this->assertObjectHasAttribute('c[d]', $this->object);
    }

    /**
     * @covers diform\data::isPopulated
     * @todo   Implement testIsPopulated().
     */
    public function testIsPopulated() {
        
        $form   =   diform()->chain()->text('a');
        $this->assertFalse($form->data->isPopulated());
        
        $form->data->request(array('a' => 'populate'));
        $this->assertTrue($form->data->isPopulated());
        
        
        $_POST['a'] = 'populated';
        $this->assertTrue(diform()->chain()->text('a')->data->isPopulated());
    }

    /**
     * @covers diform\data::value
     * @todo   Implement testValue().
     */
    public function testValue() {
        
        $form   = diform()->chain()
            ->text('a')
            ->text('b[a]')
        ;
        
        $this->assertEquals(array(), 
            diform()->chain()
            ->text('a')
            ->text('b[a]')
            ->data()
            ->value()
        );
        
        $_POST  =   array('a' => 'value', 'b' => 'not_taken');
        
        $this->assertEquals(
            array('a' => 'value'), 
            diform()->chain()
                ->text('a')
                ->text('b[a]')
                ->data()
                ->value()
        );
        
        $_POST  =   array('a' => 'value', 'b' => array('a' => 'taken'));
        
        $this->assertEquals(
            array('a' => 'value', 'b' => array('a' => 'taken')), 
            diform()->chain()
                ->text('a')
                ->text('b[a]')
                ->data()
                ->value()
        );
        
        
        $_POST  =   array(
            'a' => 'value', 'b' => array('a' => array('a', 'c')), 'dummy' => 'dummy');
        
        $this->assertEquals(
            array('a' => 'value', 'b' => array('a' => array('a', 'c'))), 
            diform()->chain()
                ->text('a')
                ->checkboxes('b[a]', null, array('choices' => array('a', 'b', 'c')))
                ->data()
                ->value()
        );
        
        $_POST  =   array(
            'a' => 'value', 
            'b' => array('a' => array('a', 'c')), 
            'dummy' => 'dummy');
        
        $this->assertEquals(
            array('a' => 'value', 'b' => array('a' => array('a', 'c'))), 
            diform()->chain()
                ->text('a')
                ->select('b[a]', null, array(
                    'multiple' => true,
                    'choices' => array('a', 'b', 'c')
                ))
                ->data()
                ->value()
        );
    }

    /**
     * @covers diform\data::request
     * @todo   Implement testRequest().
     */
    public function testRequest() 
    {
        $this->object->request(array('a' => 'b', 'c' => array('d' => 'e')));
        $this->assertObjectHasAttribute('a', $this->object);
        $this->assertEquals('b', $this->object->a);
        $this->assertObjectNotHasAttribute('c', $this->object);
        $this->assertEquals('e', $this->object->{'c[d]'});
        
    }

    /**
     * @covers diform\data::raw
     * @todo   Implement testRaw().
     */
    public function testRaw() {
        
        $this->object->request(array(
            'a' => 'b', 
            'c' => array('d' => 'e'),
            'f' => array(1, 2, 3)
        ));
        $this->assertEquals(array(
            'a' => 'b',
            'c[d]' => 'e',
            'f' => array(1, 2, 3)
        ), $this->object->raw());
    }

}
