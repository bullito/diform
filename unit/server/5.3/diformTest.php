<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-05-20 at 08:11:20.
 */
class diformTest extends PHPUnit_Framework_TestCase {

    /**
     * @var diform
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new diform;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers diform::lazyLoad
     */
    public function testLazyLoad() {
        diform::lazyLoad(false);
        $this->assertFalse(class_exists('diform\control'));
        diform::lazyLoad(true);
        $this->assertTrue(class_exists('diform\control'));
        $this->assertTrue(class_exists('diform\control\text'));
        $this->assertTrue(class_exists('diform\control\token'));
        $this->assertTrue(interface_exists('diform\control\token\storing'));
        $this->assertTrue(class_exists('diform\control\token\session'));
              
        diform::lazyLoad(true);
    }

    /**
     * @covers diform::loadClass
     * @todo   Implement testLoadClass().
     */
    public function testLoadClass() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::attrs
     * @todo   Implement testAttrs().
     */
    public function testAttrs() {
        $this->assertEquals(
            diform::attrs(array('required' => true)),
            'required="required"'
        );
        $this->assertEquals(
            diform::attrs(array('required' => false)),
            ''
        );
        $this->assertEquals(
            diform::attrs(array('required' => false, 'role' => 'button')),
            'role="button"'
        );
        $this->assertEquals(
            diform::attrs(array('class' => 'test')),
            'class="test"'
        );
        $this->assertEquals(
            diform::attrs(array('class' => array('test'))),
            'class="test"'
        );
        $this->assertEquals(
            diform::attrs(array('class' => array('test1', 'test2'))),
            'class="test1 test2"'
        );
        $this->assertEquals(
            diform::attrs(array('class' => array())),
            ''
        );
        $this->assertEquals(
            diform::attrs(array('data-rank' => 0)),
            'data-rank="0"'
        );
    }

    /**
     * @covers diform::escape
     */
    public function testEscape() {
        
        $class = get_class($this->object);
        $this->assertEquals('&quot;', $class::escape('"'));
        $this->assertEquals('<&quot;', $class::escape('<\"'));
        $this->assertEquals('&#39;', $class::escape('\''));
    }

    /**
     * @covers diform::chain
     * @todo   Implement testChain().
     */
    public function testChain() {
        
        $this->object->chain(true);
        $test1 = $this->object->text('test1');
        $this->assertInstanceOf('diform', $test1);
        $this->object->chain(false);
        $test2 = $this->object->text('test2');
        $this->assertInstanceOf('diform\control', $test2);
        $this->object->chain();
        $test3 = $this->object->text('test3');
        $this->assertInstanceOf('diform', $test3);
        
    }

    /**
     * @covers diform::__invoke
     * @todo   Implement test__invoke().
     */
    public function test__invoke() {
        $object = $this->object;
        
        $test1  =   $object('test1');
        $this->assertInstanceOf('diform\control\text', $test1);
        
        $test2  =   $object(null, 'submit');
        $this->assertInstanceOf('diform\control\submit', $test2);
    }

    /**
     * @covers diform::control
     * @todo   Implement testControl().
     */
    public function testControl() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::__call
     * @todo   Implement test__call().
     */
    public function test__call() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::add
     * @todo   Implement testAdd().
     */
    public function testAdd() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::__get
     * @todo   Implement test__get().
     */
    public function test__get() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::config
     * @todo   Implement testConfig().
     */
    public function testConfig() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::data
     * @todo   Implement testData().
     */
    public function testData() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::checkValidity
     * @todo   Implement testCheckValidity().
     */
    public function testCheckValidity() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::lang
     * @todo   Implement testLang().
     */
    public function testLang() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::render
     * @todo   Implement testRender().
     */
    public function testRender() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::request
     * @todo   Implement testRequest().
     */
    public function testRequest() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers diform::on
     * @todo   Implement testOn().
     */
    public function testOn() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
